{
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "description": "Base configuration rules with quiet automerging",
    "extends": [
        // https://docs.renovatebot.com/presets-config/#configrecommended
        "config:recommended",
        // This is helpful for seeing the state of dependencies
        ":dependencyDashboard",
        // Don't limit the number of PRs we can open
        ":disableRateLimiting",
        // Lock file maintenance is really critical to keeping a repository healthy
        ":maintainLockFilesWeekly",
        // We don't use semantic commits
        ":semanticCommitsDisabled",
        // We pin dependencies to keep dependencies deterministic
        ":pinDependencies",
        ":pinDevDependencies",
        // This isn't part of the recommended config, so adding it as we use vite
        "group:vite"
    ],
    // Don't separate out PRs for individual major jumps
    // TODO: review this one
    "separateMultipleMajor": false,
    // Don't have separate PRs for minor and patch updates
    "separateMinorPatch": false,
    // https://docs.renovatebot.com/configuration-options/#rebasewhen
    // Let renovate rebase PRs when automerging
    "rebaseWhen": "automerging",
    // Run `yarn-deduplicate --strategy highest` after yarn.lock updates
    "postUpdateOptions": [
        "yarnDedupeHighest"
    ],
    // Custom packages rules, which extend the configuration above
    "packageRules": [
        // Always require dashboard approval for major updates
        // This was largely to avoid the noise of major updates which were ESM only
        // The idea was to check and accept major updates if they were NOT ESM
        // But this hasn't been workable with our capacity
        // Plus, ESM-only is an edge case in the grand scheme of dependencies
        // @TODO: review this one, consider it being Ghost-only
        {
            "description": "Require dashboard approval for major updates",
            "matchUpdateTypes": [
                "major"
            ],
            "dependencyDashboardApproval": true
        },
        // Automerge all minor and patch updates to all dependencies
        // UNLESS the version number is less than 1.0.0 in which case
        // We can't be sure if the bump is effectively major
        // Also don't automerge major updates (overridden for some dependencies below)
        // @TODO review this one, simplify with testing and linting
        {
            "matchCurrentVersion": ">= 1.0.0",
            "matchDepTypes": [
                "devDependencies",
                "dependencies",
                "optionalDependencies"
            ],
            "automerge": true,
            "automergeType": "pr",
            "major": {
                "automerge": false
            }
        },
        // Always automerge test and linting tools
        // Regardless of whether they're major or minor updates
        // @TODO: review this one, consider branch merges (no PRs)
        {
            "description": "Automerge test and linting tools",
            "extends": [
                "packages:linters",
                "packages:jsTest"
            ],
            "matchPackageNames": [
                "c8",
                "eslint-plugin-ghost",
                "grunt",
                "nock",
                "nodemon",
                "rewire",
                "supertest",
                "tmp"
            ],
            "automerge": true
        },
        // Don't automerge major bumps for @tryghost/ packages, gscan, or knex-migrator
        // If you don't want renovate to automerge your changes, make them majors
        {
            "matchPackagePatterns": [
                "^@tryghost/.+",
                "gscan",
                "knex-migrator"
            ],
            "major": {
                "automerge": false
            }
        },
        // Group types packages together
        {
            "matchPackagePrefixes": [
                "@types"
            ],
            "groupName": "Types packages"
        },
        // Group TryGhost packages together
        {
            "matchPackagePatterns": [
                "@tryghost"
            ],
            "excludePackageNames": [
                "@tryghost/koenig-lexical"
            ],
            "excludePackagePrefixes": [
                "@tryghost/kg-"
            ],
            "groupName": "TryGhost packages"
        },
        // Group Koenig packages together
        {
            "matchPackageNames": [
                "@tryghost/koenig-lexical"
            ],
            "matchPackagePrefixes": [
                "@tryghost/kg-"
            ],
            "groupName": "Koenig packages"
        },
        // Group CSS preprocessors together
        {
            "description": "Group CSS preprocessors",
            "matchPackagePatterns": [
                "^postcss",
                "^css"
            ],
            "matchPackageNames": [
                "autoprefixer",
                "ember-cli-postcss"
            ],
            "groupName": "CSS preprocessors"
        },
        // Group metascraper dependencies together
        {
            "matchPackagePatterns": [
                "metascraper"
            ],
            "groupName": "metascraper"
        }
    ]
}